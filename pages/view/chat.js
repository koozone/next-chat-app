import Head from 'next/head';
import {useCallback, useEffect, useMemo, useState, useContext} from 'react';
import {DateTime} from 'luxon';
import uid from 'tiny-uid';

import {SocketContext} from '../net/socketContent';
import NavBar from '../component/navBar';
import {Header3} from '../component/header';

export default function room({nickName, roomName}) {
	const socket = useContext(SocketContext);
	const [roomData, setRoomData] = useState({
		roomName: roomName,
	});
	const [roomList, setRoomList] = useState([]);
	const [userList, setUserList] = useState([]);
	const [chatList, setChatList] = useState([]);
	const [chatData, setChatData] = useState({
		nickName: nickName,
		message: '',
	});

	useEffect(() => {
		// 채팅방 접속 전송
		socket.emit('joinRoom', {nickName, roomName});

		// 채팅방 정보 업데이트 이벤트
		socket.on('updateRoom', ({roomName, userList}) => {
			console.log(`채팅방 정보~~~`, {roomName, userList});
			setRoomData({roomName});
			setUserList(userList);
		});
	}, []);

	useEffect(() => {
		// 서버 메세지 도착 이벤트
		socket.on('message', (data) => {
			console.log(`${data.nickName}님께 받음~~~`, data);

			setChatList([...chatList, data]);
			setChatData({...chatData, message: ''});
		});

		return () => {
			socket.off('message');
		};
	}, [chatList, chatData]);
	console.log('userList', userList);
	console.log('chatList', chatList);
	const changeInput = useCallback(
		(event) => {
			const {name, value} = event.target;

			setChatData({...chatData, [name]: value});
		},
		[chatData]
	);

	const clickButton = useCallback(
		(event) => {
			console.log(`${chatData.nickName}님이 보냄~~~`, chatData);
			// 사용자 메세지 전송
			socket.emit('chatMessage', chatData);
		},
		[chatData]
	);

	return (
		<div className="">
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			{/* <NavBar /> */}
			<Header3 />

			<h2>{roomName}</h2>

			<label>이름 : </label>
			<input type="text" name="nickName" value={chatData.nickName} onChange={changeInput}></input>

			<ul>
				{chatList.map((item, index) => {
					return <li key={index}>{`${item.nickName} : ${item.message} [${DateTime.fromMillis(item.date).toFormat('LL-dd hh:mm')}]`}</li>;
				})}
			</ul>

			<input type="text" name="message" value={chatData.message} onChange={changeInput}></input>
			<button type="button" onClick={clickButton}>
				보내기
			</button>

			<ul>
				{userList.map((item) => {
					return <li key={item.nickName}>{item.nickName}</li>;
				})}
			</ul>
		</div>
	);
}

export const getServerSideProps = async (req, res) => {
	const {n: nickName, r: roomName} = req.query;

	return {
		props: {
			nickName: nickName || uid(),
			roomName: roomName || '공개 대화방',
		},
	};
};
